import scipy as sp
import numpy as np
import matplotlib.pyplot as plt
from itertools import groupby
import pandas as pd
import itertools
import array as arr
#%%
def sort(x):
    for xnum in range(len(x)):
        swap = i + np.argmin(x[xnum:])
        (x[xnum],x[swap]) = (x[swap], x[xnum])
    return x
#numbers given
x,y_long = sp.loadtxt(r"C:\Users\anugi\OneDrive\Documents\Physics\Y1_project\number_fit_1.txt", unpack =True)
print(x)
print(y_long)
y = []
yarr = np.arange(13)
for long in (yarr):
    if y_long[long]==0:
        continue
    else:
        y.append(y_long[long])

print(y)
#%%
#using 0s as spaces and 1s as blocks. Will change later
grid = [[1,0,1,0,1,0,1,0,1,0,1,0,1],
        [0,0,0,0,0,0,1,0,0,0,0,0,0],
        [1,0,1,0,1,0,1,0,1,0,1,0,1],
        [0,0,0,0,1,0,0,0,0,0,0,0,0],
        [1,0,1,1,1,0,1,1,1,0,1,0,1],
        [0,0,0,0,0,0,1,0,0,0,0,1,1],
        [1,0,1,0,1,0,0,0,1,0,1,0,1],
        [1,1,0,0,0,0,1,0,0,0,0,0,0],
        [1,0,1,0,1,1,1,0,1,1,1,0,1],
        [0,0,0,0,0,0,0,0,1,0,0,0,0],
        [1,0,1,0,1,0,1,0,1,0,1,0,1],
        [0,0,0,0,0,0,1,0,0,0,0,0,0],
        [1,0,1,0,1,0,1,0,1,0,1,0,1]] #using p18 Number fit puzzle. Copy and paste grid for other puzzles

solve_grid = ['1010101010101',
              '0000001000000',
              '1010101010101',
              '0000100000000',
              '1011101110101',
              '0000001000011',
              '1010100010101',
              '1100001000000',
              '1010111011101',
              '0000000010000',
              '1010101010101',
              '0000001000000',
              '1010101010101']
#grid[:] = ['*' if ac == 1 else ac for ac in grid]
print(solve_grid)
print(grid)
#print(grid[])
df = pd.DataFrame(data = grid) #transpose grid, to read columns later on
dgrid = df.T
print(dgrid) #print transposed grid

grid = np.array(grid) #convert grid to array
print(grid[12,12])

print(grid)
print(type(grid))
print(grid[1]) #print second row of grid
#print(grid[:,0]) #print column

#creating empty list to store output
from itertools import groupby
array = np.arange(13)
print(array)
#%%
myoutput = []
fix_grid = []
for i in (array):
    fix = sp.array(grid[i])
    myinput = grid[i]
    myoutput.append([i])
    for k,g in groupby(myinput):
        myoutput.append((len(list(g)),int(k))) #counts numbers of 1s and 0s
    '''for ac in (array):
        if fix[ac] == 1:
            fix_grid.append('X')
        else:
            fix_grid.append([ac])'''
    print (myinput)
# =============================================================================
#     for r in range(len(myinput)):
#         for row in range(len(myoutput)):
#             if myinput[r] == myoutput[row]:
# =============================================================================
                
print(myoutput)
    #print(fix_grid)
    #print(myoutput)

#%%
#doing columns (grid has been transposed)
downarray = np.array(dgrid) #put transposed grid into array
print(downarray)
print(type(downarray))
print(downarray[1])
print(downarray[:,0])
#%%
#counts 0s and 1s in columns (down)
darray = []
for j in (array):
    dinput = downarray[j]
    darray.append([j])
    for m,n in groupby(dinput):
        darray.append((len(list(n)),int(m)))
    print(dinput)
print(*darray)
#%%
print(len(x))
print(len(y))
xarray = np.arange(len(x)) #for counting digits
print(xarray)
yarray = np.arange(len(y))
print(yarray)
#%%
print(sort(x))
#print(len(x)) #to check number of elements in document
for l in (xarray):
    #xstr = str(x[l]) #count number of digits in each number
    xint = int(x[l]) #convert x to integer
    xstr = str(xint) #count number of digits in each number
    xact = len(xstr) #Include -2 if xstr has .0 on the end of each number
    print(xstr)
    print(xint)
    #xout = '{:.8E}'.format(x) #tried to convert x to string. Did not need this
    #print(xout)
    #number = x[l]
    #num = str(number)
    print(xact)  
for yl in(yarray):
    yint = int(y[yl])
    ystr = str(yint)
    yact = len(ystr)
    print(ystr)
    print(yact)
#%%
myoutput = []
for i in (array):
    myinput = grid[i]
    myoutput.append([i])
    for k,g in groupby(myinput):
        myoutput.append((len(list(g)),int(k))) #counts numbers of 1s and 0s
        #print(int(k))
        if int(k) == 0:
            print('whoo a number')
        else:
            print('yeet no number')
        for l in (xarray):
            xstr = str(x[l]) #count number of digits in each number
            xact = len(xstr) - 2 #Include -2 if xstr has .0 on the end of each number         
    print (myinput)
print(myoutput)
#%%
across_array = []
def split(xstr):
    return list(xstr)
myoutput = []
print(len(x)) #to check number of elements in document
across = []
across_n = []
down = []
down_n = []
for l in (xarray):
    xint = int(x[l]) #convert to integer
    xstr = str(xint) #converts integer to string so that it can be counted
    xact = len(xstr) #Counts number of digits in each number
    print()
    print(xstr)
    
    #print(xact)
    #check if there is space in each row for the number (in for loop, so will check each number for each row indiviually)
    for i in (array):
        myinput = grid[i] 
        #print(myinput)
        #myoutput.append([i])
        for k,g in groupby(myinput):
            num = len(list(g)) #number of 0s or 1s in a group
            myoutput.append((len(list(g)),int(k))) #counts numbers of 1s and 0s
            if int(k) == 0: #singles out spaces. 0 signifies a space
                klist = []
                if num == xact:
                    #print('indeed') #if the number of 0s is equal to the number of digits in the number
                    print(myinput)
                    
                    nlist = split(xstr) #split the digits in each number into a list
                    #print(nlist)
                    koththamalli = np.arange(xact) 
                    #klist.append(xstr)
                    #klist = []
                    #bottom bit commented out as it does not quite work
                    #for a in (koththamalli):
                    for b in (array):
                        element = myinput[b]
                        if element == 0:
                            #klist.append([i])
                            klist.append(xstr) #appends whole number
                        else:
                            klist.append('-')
                    #print(klist)
                    across.append(xstr)
                    across_n.append([i])
                    #print(across)
                    #print(across_n)
                    #counts 0s and 1s in columns (down)
                    #darray = []
                    
                    sgrid = split(myinput)
                    #print(sgrid)
                    #for string in (array):
                        #if 
                    newgrid = []
                    for yoo in (array):
                        '''if there is the same number of consecutive 0s in sgrid then append each element of nlist to that position
                        if not, append 'X' '''
                        string_num = solve_grid[yoo]
                        #print(string_num)
                        if [yoo] == [i]: #making sure the right row is extracted from solve_grid
                            #print('yes')
                            for letter in (array):
                                for digit in (koththamalli):
                                    #practice_string = string_num.replace('0','7')
                                    #print(practice_string)
                                    if string_num[letter] == '1':
                                        continue
                                    if string_num[letter] == '0':
                                        continue
                                    if string_num[letter] == '0':
                                        continue
                                    if string_num[letter] == '0':
                                        continue
                                    if string_num[letter] == '1':
                                        new_string = string_num.replace('000',xstr)
                                        #across_array.append(new_string)
                                    #else:
                                        #across_array.append(string_num)
                                        #if string_num[letter+] == '0':
                            #across_array.append(new_string)                
                            print(new_string)
                            #print(practice_string)
                        #print(string_num)      
                        #if sgrid[yoo] == 0:
                         #   newgrid.append(nlist[yee])
                            
                       
                    #print(list(g))
    '''darray = []
    for j in (array):
        dinput = downarray[j]
        #darray.append([j])
        for m,n in groupby(dinput):
            dnum = len(list(n))
            darray.append((len(list(n)),int(m)))
            if int(m) == 0:
                mlist = []
                if dnum == xact:
                    #print(dinput)
                    for c in (array):
                        delement = dinput[c]
                        if delement == 0:
                            mlist.append([j])
                            mlist.append(xstr)
                        else:
                            mlist.append('-')
                    down.append(xstr)
                    down_n.append([j])
                    #try to check each digit in columns to see if across digit is equal
                                                                           
                        
            #print(dinput)
    #print(*darray)'''
                    
#print(across_array)                    
        #print (myinput)
    #print(*myoutput)
print(across) #output is list of numbers in file
print(across_n) #output is the rows on which there is space for them
#print(down)
#print(down_n)
#%%

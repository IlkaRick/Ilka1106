#%%

###### Choose to cut off background from 3500 #######
################## CUT OFF BACKGROUND #######################

for i in range(4611):
    for j in range(2570): # For loop through whole image
        # girl what the fuck
        impix = pixel[i][j] # Assign variable to pixel
        if impix <= 3500: # Exclude values below chosen background
            mask[i][j] = 0 # Change 1 to 0
print(mask)

# =============================================================================
# pot_sources = [] # lmao
# pot_position = []
# for i in range(4611):
#     for j in range(2570): # For loop through whole image
#         # girl what the fucK
#         impix = pixel[i][j]
#         maskpix = mask[i][j]
#         if maskpix == 1:
#             pot_sources.append(impix)
# print(len(pot_sources))
# =============================================================================

######################### FINDING THE SOURCES #####################
pix_value = []
pix_pos = []
for i in range(4611):
    for j in range(2570):
        impix = pixel[i][j]
        maskpix = mask[i][j]
        if maskpix == 1:
            pix_value.append(impix)
            pix_pos.append(([i,j]))
copy_pixvalue = pix_value
copy_pixpos = pix_pos
copy_mask = mask
#%%
################### CHECK INDEX OF MAXIMUM PIXEL VALUE ################
# =============================================================================
# max_value = max(pix_value)
# max_index = pix_value.index(max_value) # Find index 
# sepindex = pix_pos[max_index]
# print(max_value)
# print(max_index)
# print(pix_pos[max_index])
# print(sepindex[0])
# =============================================================================
#%%

'''
NOTE: Indices are reversed:
    Takes form of [y, x]
'''
pix_value = copy_pixvalue
pix_pos = copy_pixpos
############# DEFINE CIRCLE AND ELLIPSE ############
def Circle(x, y, x0, y0):
    r = ((x - x0)**2 + (y - y0)**2)**(1/2)
    return r

def Ellipse(x, y, x0, y0, a, b):
    one = ((x - x0)**2)/(a**2) + ((y - y0)**2)/(b**2)
    return one

################## FIND SMALLEST SOURCES ###############
sources = []

for i in range(4611):
    for j in range(2570):
        impix = pixel[i][j]
        maskpix = mask[i][j]
        index = [i, j]
        if maskpix == 1:
            #print(index)
        #if j == 700 and i == 350:
            #break
            max_value = max(pix_value)
            max_index = pix_value.index(max_value) # Find index 
            sepindex = pix_pos[max_index] # make sure index of value in loop matches brightest pixel
            if sepindex == index:
                x0 = sepindex[1] # Separate x and y coordinates
                y0 = sepindex[0]
                r1 = 21 # Choose aperture radius from region file containing radius of brightest source
                r2 = 23 # Choose bg aperture size
                bg_aperture = []
                aperture = []
                bg_indices = []
                indices = []
                print('pixvalue:', len(pix_value))
                for k in range(len(pix_value)):
                    #print(k)
                    if k == len(pix_value):
                        break
                    pv = pix_value[k]
                    pi = pix_pos[k]
                    x = pi[1]
                    y = pi[0]
                    radius = Circle(x, y, x0, y0)
                    #print(k)
                    #print('pixvalue before:', len(pix_value), 'and pi:', pi)
                    if radius > r1 and radius <= r2: # Check if pixel is within background aperture
                        bg_aperture.append(pv)
                        bg_indices.append(pi)
                        pix_value.pop(k) # Remove pixel and its indices from list
                        pix_pos.pop(k)
                        print('new pixvalue, bg:', len(pix_value))
                    elif radius <= r1: # Check if pixel is in main aperture (part of the source)
                        aperture.append(pv)
                        indices.append(pi)
                        pix_value.pop(k) # Remove pixel and its indices from list
                        pix_pos.pop(k)
                        print('new pixvalue:', len(pix_value), 'and pi:', pi, 'and pv:', pv)
                    
                #print('new pixvalue:', len(pix_value), 'and max value:', max_value)
                if len(bg_aperture) == 0:
                    fileindex = str(k)
                    #comb = np.vstack(aperture) # turn to 2d array
                    f = open('Sources/source'+fileindex, 'x') # Create file to put data in
                    np.savetxt(f, aperture)
                    f.close()
                    file = open('Index/index'+fileindex, 'x')
                    np.savetxt(file, indices)
                    file.close()
                    for ind in range(len(indices)):
                        pixind = pix_pos[ind]
                        xpos = pixind[1]
                        ypos = pixind[0]
                        mask[ypos][xpos] = 0 # Change value in pixel position in mask to 0
                else:
                    continue
#%%
print(max(pix_value))
file.close()

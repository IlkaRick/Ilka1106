first = [0,7,15,40,52,61,78,80,81,98,135,139,147,159,187,216,228,256,287,288,297,315,323]
first1 = [369,441,450,467,547,555,556,590,664,690,716,728,746,770,815,822,842,855,981,1032,1118,1216,1307,1313,1327,1349,1380,1406,1459,1595,1625,1634,1639,1769,1828,1883,1892,1904,1907,1916,1955,1987,2053,2074,2079,2094,2123,2125,2130,2226,2338,2356,2430,2486,2516,2581,2703,2755,2787,2788,2898,2931,2959,2962,2996,3088,3204,3216,3512,3610,3646,3663,3702,3895,3902,3920,3951,3960,3970,4039,4086,4128,4139,4251,4310,4345,4511,4514,4625,4804,4885,4957,4997,5050]
print(len(first))

sum_sources = [] #sum of pixel values of sources
num_sources = [] #number of pixels present in source file
max_sources = [] #value of maximum pixel in the source file
x_coor = [] #x coordinate of the maximum pixel in the source file
y_coor = [] #y coordinate of the maximum pixel in the source file

max_bg = [] #maximum pixel value in the background pixel file
median_bg = [] #median pixel value in the background pixel file
num_bg = [] #number of pixels present in background file
bgx_coor = [] #x coordinate of the maximum pixel in the bg file
bgy_coor = [] #y coordinate of the maximum pixel in the bg file


for file in range(len(first)):
    num = str(first[file])
    source_file = np.loadtxt(r'C:\Users\Yi Gan\Documents\Y3 Lab\A1 - astronomical image processing\Sources\source'+num)
    index_y, index_x = np.loadtxt(r'C:\Users\Yi Gan\Documents\Y3 Lab\A1 - astronomical image processing\Index\index'+num, delimiter = ' ', unpack = True)
    source_file = source_file.tolist() #change array to a list to get the index of maximum value
    
    print('sum of the sources pixels =', sum(source_file)) # check for value appended is correct
    sum_sources.append(sum(source_file)) #append to a list
    
    print('number of pixels present = ', len(source_file)) #just to double check the area of aperture
    num_sources.append(len(source_file))
    
    print('maximum pixel value = ', max(source_file)) 
    maximum = max(source_file)
    max_sources.append(maximum)
    index_max = source_file.index(maximum)
    #print(index_max)
    print('x_coor=', index_x[index_max]) #check for correct coordinate appended
    print('y_coor=', index_y[index_max])
    x_coor.append(index_x[index_max])
    y_coor.append(index_y[index_max])
    
    #plt.hist(source_file, bins=400)
    #plt.title('Plot count histogram source'+num)
    #plt.savefig('histogram\plot'+num)
    #plt.show()
    
#for file in range(len(first)):
    #num = str(first[file])
    bg_file = np.loadtxt(r'C:\Users\Yi Gan\Documents\Y3 Lab\A1 - astronomical image processing\bg_aperture\bg_aperture'+num)
    bgindex_y, bgindex_x = np.loadtxt(r'C:\Users\Yi Gan\Documents\Y3 Lab\A1 - astronomical image processing\bg_index\bg_index'+num, delimiter = ' ', unpack = True)
    bg_file = bg_file.tolist()
    
    print('number of pixels present = ', len(bg_file)) #just to double check the area of aperture
    num_bg.append(len(bg_file))
    
    print('maximum background=' , max(bg_file)) #check for the value appended
    bg_maximum = max(bg_file)
    max_bg.append(bg_maximum)
    bgindex_max = bg_file.index(bg_maximum)
    
    print('x_coor=', bgindex_x[bgindex_max]) #check for correct coordinate appended
    print('y_coor=', bgindex_y[bgindex_max])
    bgx_coor.append(index_x[index_max])
    bgy_coor.append(index_y[index_max])
    
    median = np.median(bg_file) #local background median
    print('background median',[num],'=', median)
    median_bg.append(median) 
   
    #plt.hist(bg_file, bins=400)
    #plt.title('Plot count histogram background'+num)
    #plt.savefig('background histogram\plot'+num)
    #plt.show()

final_sum = [] # for the counts of pixels - local background
for i in range (len(sum_sources)):
    background = median_bg[i] # local background pixel
    num_pix = num_sources[i] #number of pixel present in the source
    new_sum = sum_sources[i] - num_pix*background
    final_sum.append(new_sum)
    
data = np.array([x_coor, y_coor, final_sum, sum_sources, num_sources, max_sources, median_bg, num_bg, max_bg, bgx_coor, bgy_coor])

data = data.T

np.savetxt('catalog_1.txt', data, delimiter = ',')

import scipy as sp
import numpy as np
import matplotlib.pyplot as plt
from itertools import groupby
import pandas as pd
import itertools
import array as arr

def sort(x):
    for xnum in range(len(x)):
        swap = i + np.argmin(x[xnum:])
        (x[xnum],x[swap]) = (x[swap], x[xnum])
    return x
#numbers given
x_b,y_long = sp.loadtxt(r"C:\Users\anugi\OneDrive\Documents\Physics\Y1_project\number_fit_1.txt", unpack =True)
x = sorted(x_b, reverse =True)
print(x)
print(y_long)
y_b = []
yarr = np.arange(13)
for long in (yarr):
    if y_long[long]==0:
        continue
    else:
        y_b.append(y_long[long])
y =sorted(y_b, reverse =True)
print(y)

#using 0s as spaces and 1s as blocks. Will change later
grid = [[1,0,1,0,1,0,1,0,1,0,1,0,1],
        [0,0,0,0,0,0,1,0,0,0,0,0,0],
        [1,0,1,0,1,0,1,0,1,0,1,0,1],
        [0,0,0,0,1,0,0,0,0,0,0,0,0],
        [1,0,1,1,1,0,1,1,1,0,1,0,1],
        [0,0,0,0,0,0,1,0,0,0,0,1,1],
        [1,0,1,0,1,0,0,0,1,0,1,0,1],
        [1,1,0,0,0,0,1,0,0,0,0,0,0],
        [1,0,1,0,1,1,1,0,1,1,1,0,1],
        [0,0,0,0,0,0,0,0,1,0,0,0,0],
        [1,0,1,0,1,0,1,0,1,0,1,0,1],
        [0,0,0,0,0,0,1,0,0,0,0,0,0],
        [1,0,1,0,1,0,1,0,1,0,1,0,1]] #using p18 Number fit puzzle. Copy and paste grid for other puzzles

across_grid = ['110101010101011',
              '100000010000001',
              '110101010101011',
              '100001000000001',
              '110111011101011',
              '100000010000111',
              '110101000101011',
              '111000010000001',
              '110101110111011',
              '100000000100001',
              '110101010101011',
              '100000010000001',
              '110101010101011']
colu_grid = ['110101011101011',
             '100000001000001',
             '110101010101011',
             '100001000000001',
             '110111010101011',
             '100000000100001',
             '111101101101111',
             '100001000000001',
             '110101010111011',
             '100000000100001',
             '110101010101011',
             '100000100000001',
             '110101110101011']
#solve_grid[:] = ['x' if ac == '1' else ac for ac in solve_grid]
solve_grid =[]
down_grid =[]
for acr in range(13):
    ve_grid = across_grid[acr].replace('1','x')
    print(ve_grid)
    solve_grid.append(ve_grid)
print(solve_grid)
for dow in range(13):
    lu_grid = colu_grid[dow].replace('1','x')
    down_grid.append(lu_grid)
print(down_grid)
print(grid)
#print(grid[])
df = pd.DataFrame(data = grid) #transpose grid, to read columns later on
dgrid = df.T
print(dgrid) #print transposed grid
#%%
grid = np.array(grid) #convert grid to array
print(grid[12,12])

print(grid)
print(type(grid))
print(grid[1]) #print second row of grid
#print(grid[:,0]) #print column

#creating empty list to store output
from itertools import groupby
array = np.arange(13)
print(array)

myoutput = []
fix_grid = []
for i in (array):
    fix = sp.array(grid[i])
    myinput = grid[i]
    myoutput.append([i])
    for k,g in groupby(myinput):
        myoutput.append((len(list(g)),int(k))) #counts numbers of 1s and 0s
    '''for ac in (array):
        if fix[ac] == 1:
            fix_grid.append('X')
        else:
            fix_grid.append([ac])'''
    print (myinput)
# =============================================================================
#     for r in range(len(myinput)):
#         for row in range(len(myoutput)):
#             if myinput[r] == myoutput[row]:
# =============================================================================
                
print(myoutput)
    #print(fix_grid)
    #print(myoutput)


#doing columns (grid has been transposed)
downarray = np.array(dgrid) #put transposed grid into array
print(downarray)
print(type(downarray))
print(downarray[1])
print(downarray[:,0])

#counts 0s and 1s in columns (down)
darray = []
for j in (array):
    dinput = downarray[j]
    darray.append([j])
    for m,n in groupby(dinput):
        darray.append((len(list(n)),int(m)))
    print(dinput)
print(*darray)

print(len(x))
print(len(y))
xarray = np.arange(len(x)) #for counting digits
print(xarray)
yarray = np.arange(len(y))
print(yarray)

#print(sort(x))
#print(len(x)) #to check number of elements in document
for l in (xarray):
    #xstr = str(x[l]) #count number of digits in each number
    xint = int(x[l]) #convert x to integer
    xstr = str(xint) #count number of digits in each number
    xact = len(xstr) #Include -2 if xstr has .0 on the end of each number
    print(xstr)
    print(xint)
    #xout = '{:.8E}'.format(x) #tried to convert x to string. Did not need this
    #print(xout)
    #number = x[l]
    #num = str(number)
    print(xact)  
for yl in(yarray):
    yint = int(y[yl])
    ystr = str(yint)
    yact = len(ystr)
    print(ystr)
    print(yact)

myoutput = []
for i in (array):
    myinput = grid[i]
    myoutput.append([i])
    for k,g in groupby(myinput):
        myoutput.append((len(list(g)),int(k))) #counts numbers of 1s and 0s
        #print(int(k))
        if int(k) == 0:
            print('whoo a number')
        else:
            print('yeet no number')
        for l in (xarray):
            xstr = str(x[l]) #count number of digits in each number
            xact = len(xstr) - 2 #Include -2 if xstr has .0 on the end of each number         
    print (myinput)
print(myoutput)
#%%
across_array = []
def split(xstr):
    return list(xstr)
myoutput = []
print(len(x)) #to check number of elements in document
across = []
across_n = []
down = []
down_n = []
acr_num = []
dow_num  = []
print('Across')
for l in (xarray):
    xint = int(x[l]) #convert to integer
    xstr = str(xint) #converts integer to string so that it can be counted
    xact = len(xstr) #Counts number of digits in each number
    print(xstr)
    #print(xact)
    #check if there is space in each row for the number (in for loop, so will check each number for each row indiviually)
    for i in (array):
        myinput = grid[i] 
        #print(myinput)
        #myoutput.append([i])
        for k,g in groupby(myinput):
            num = len(list(g)) #number of 0s or 1s in a group
            myoutput.append((len(list(g)),int(k))) #counts numbers of 1s and 0s
            if int(k) == 0: #singles out spaces. 0 signifies a space
                if num == xact:
                    #print('indeed') #if the number of 0s is equal to the number of digits in the number
                    print(myinput)
                    
                    nlist = split(xstr) #split the digits in each number into a list
                    #print(nlist)
                    xran = np.arange(xact) 
                    #klist.append(xstr)
                    #klist = []
                    #bottom bit commented out as it does not quite work
                    #for a in (koththamalli):
                    #print(klist)
                    #across.append(xstr)
                    #across_n.append(i)
                    #print(across)
                    #print(across_n)
                    #counts 0s and 1s in columns (down)
                    #darray = []
                    
                    sgrid = split(myinput)
                    #print(sgrid)
                    #for string in (array):
                        #if 
                    newgrid = []
                    for yoo in (array):
                        '''if there is the same number of consecutive 0s in sgrid then append each element of nlist to that position
                        if not, append 'X' '''
                        string_num = solve_grid[yoo]
                        #print(string_num)
                        if [yoo] == [i]: #making sure the right row is extracted from solve_grid
                            print('yes')
                            print(string_num)
                            for letter in range(15):
                                for digit in (xran):
                                    #practice_string = string_num.replace('0','7')
                                    #print(practice_string)
                                    '''If there is the same number of 0s in a row as digits
                                    in xstr, replace that substring of 0s with xstr
                                    xact is number of digits in xstr'''
                                    acnew_string = []
                                    zeros = 'x' + xact*'0' + 'x'
                                    newxstr = 'x' + xstr + 'x'
                                    six_string = 'x' + xstr + 'x000000x'
                                    six_new_string = 'x000000x' +xstr +'x'
                                    if string_num[letter-1] == string_num[letter]:
                                        new_string = string_num.replace(zeros,newxstr)                                        
                                    if new_string in across:
                                        continue
                                   
                                        '''if number fits, remove string_num from that
                                        grid, and continue trying to fit the down numbers
                                        assuming the number is right. If the down numbers
                                        fit, continue. If not, append string_num back on
                                        to the grid'''
                            #across.append(six_new_string)            
                                print('row number',array[yoo])
                                print(new_string)
                            
                            acrossrange = []
                            if new_string == six_string:
                                if array[i]==1:
                                    acrossrange.append(six_new_string)
                                if array[i]==1:
                                    acrossrange.append(six_new_string)
                            
                                                          
                            if new_string == six_string:
                                ar = np.arange(len(acrossrange))
                                
                                for siddhalepha in range(len(acrossrange)):                                
                                    if array[i]== 1:
                                        if siddhalepha ==1:
                                            if six_new_string in across:
                                                break
                                        across.append(new_string)
                                        across.append(six_new_string)
                                        across_n.append(yoo)
                                        across_n.append(yoo)
                                        acr_num.append(xstr)
                                        acr_num.append(xstr)
                                    
                                    
                                    
                                    elif array[i]== 11:
                                        if siddhalepha ==1:
                                            if six_new_string in across:
                                                break
                                        across.append(new_string)
                                        across.append(six_new_string)
                                        across_n.append(yoo)
                                        across_n.append(yoo)
                                        acr_num.append(xstr)
                                        acr_num.append(xstr)
                                    
                                    
                                    
                            else:
                                across_n.append(yoo)
                                across.append(new_string)
                                acr_num.append(xstr)
# =============================================================================
#                             acrossrange = []
#                             if new_string == six_string:
#                                 if array[i]==1:
#                                     acrossrange.append(six_new_string)
#                                 if array[i]==1:
#                                     acrossrange.append(six_new_string)
#                             acrossrange.append(new_string)
#                                 
# =============================================================================
        
                                    #if string_num[letter] == '1':
                                     #   continue
# =============================================================================
#                                     if string_num[letter] == '1':
#                                         #res = string_num.replace('1','0')
#                                         #print(res)
#                                         continue
#                                     if string_num[letter] == '0':
#                                         continue
#                                     if string_num[letter] == '0':
#                                         continue
#                                     if string_num[letter] == '0':
#                                         continue
#                                     if string_num[letter] == '1':
#                                         new_str = string_num.replace('000',xstr)
#                                     else:
#                                         new_str = string_num
#                             print(new_str)
# =============================================================================
                                        
                                        #across_array.append(new_string)
# =============================================================================
#                                     else:
#                                         new_string = string_num
#                                         print(new_string)
#                                         across_array.append(string_num)
# =============================================================================
                                        #if string_num[letter+] == '0':
                                    
                            #across_array.append(new_string)                
                            #print(new_string)
                            #print(practice_string)
                        #print(string_num)      
                        #if sgrid[yoo] == 0:
                         #   newgrid.append(nlist[yee])
                            
print()                       
print('Down')                    #print(list(g))
for t in (yarray):
    yint = int(y[t]) #convert to integer
    ystr = str(yint) #converts integer to string so that it can be counted
    yact = len(ystr) #Counts number of digits in each number
    print(ystr)
    #print(yact)
    #check if there is space in each row for the number (in for loop, so will check each number for each row indiviually)
    darray = []
    for j in (array):
        dinput = downarray[j]
        #darray.append([j])
        for m,n in groupby(dinput):
            dnum = len(list(n))
            darray.append((len(list(n)),int(m)))
            if int(m) == 0:
                mlist = []
                if dnum == yact:
                    print(dinput)
                    for c in (array):
                        delement = dinput[c]
                        if delement == 0:
                            mlist.append([j])
                            mlist.append(ystr)
                        else:
                            mlist.append('-')
                    #down.append(ystr)
                    down_n.append(j)
                    #try to check each digit in columns to see if across digit is equal
                    tgrid = split(dinput)
                    yran = np.arange(yact)
                    #print(sgrid)
                    #for string in (array):
                        #if 
                    onegrid = []
                    for yee in (array):
                        '''if there is the same number of consecutive 0s in sgrid then append each element of nlist to that position
                        if not, append 'X' '''
                        dstring_num = down_grid[yee]
                        #print(string_num)
                        if [yee] == [j]: #making sure the right row is extracted from solve_grid
                            #print('yes')
                            print(dstring_num)
                            for dletter in range(15):
                                for ddigit in (yran):
                                    #practice_string = string_num.replace('0','7')
                                    #print(practice_string)
                                    '''If there is the same number of 0s in a row as digits
                                    in xstr, replace that substring of 0s with xstr
                                    xact is number of digits in xstr'''
                                    newystr = 'x' + ystr + 'x'
                                    dzeros = 'x' + yact*'0' + 'x'
                                    if dstring_num[dletter-1] == dstring_num[dletter]:
                                        dnew_string = dstring_num.replace(dzeros,newystr)
                                        '''if number fits, remove string_num from that
                                        grid, and continue trying to fit the down numbers
                                        assuming the number is right. If the down numbers
                                        fit, continue. If not, append string_num back on
                                        to the grid'''
                            #print('column number',array[yee])
                            print(dnew_string)
                            down.append(dnew_string) 
                            dow_num.append(ystr)                                                 
            #print(dinput)
    #print(*darray)'''
#print(new_string)                    
#print(across_array)                    
        #print (myinput)
    #print(*myoutput)
acrossn = []
stringcross = list(map(str,across_n))  


for halka in range(57):
    if stringcross[halka] == '1':
        if stringcross[halka-2] == '1':
            acrossu = stringcross[halka].replace('1','11')
            acrossn.append(acrossu)
        else:
            acrossn.append(stringcross[halka])
    else:
        acrossn.append(stringcross[halka])
print(acrossn)
aacross = []
for cham in range(57):
    buruwa = across[cham]
    for balla in range(15):
        yakkha = split(buruwa)
        del yakkha[0]
        del yakkha[13]        
    yakkho = ''.join(yakkha)
    aacross.append(yakkho)
        
ddown = []
for marine in range(40):
    haraka = down[marine]
    for nariya in range(15):
        machang = split(haraka)
        del machang[0]
        del machang[13]
    modaya = ''.join(machang)
    ddown.append(modaya)
    
print(aacross)
print(ddown)
aran = np.arange(len(across)) #range of numbers in 
dran = np.arange(len(down))
acrosslist = (np.vstack((acrossn, aacross, acr_num)).T)
downlist = (np.vstack((down_n, ddown, dow_num)).T)
# =============================================================================
# print(across) #output is list of numbers in file
# print(across_n) #output is the rows on which there is space for them
# print(down)
# print(down_n)
# =============================================================================
print(acrosslist)
print()
print(downlist)
#%%
for bun in acrosslist:
    for lamb in downlist:
        hop = bun[0]
        meh = lamb[0]
        if hop == meh:
            print(bun[0],bun[1],lamb[1])
#%%
real_across = []
real_down = []
for u in (aran): #look through each row individually
    print()
    #print()
    print('across')
    print(acrosslist[u])
    print('down')
    for v in (dran): #look through each column wrt the row
        #print('ufufu')
        for ele in range(15): #each element of the row
            for dele in range(15): #each element of the column
                across_u = acrosslist[u] #looking at each row separately
                arow = across_u[1] #the string representing the row
                down_v = downlist[v] #looking at each column separately 
                dcol = down_v[1] #the string repesenting the column
                downydown = str(down_v[0]) #not necessary
                acrdig = across_u[2]
                dowdig = down_v[2]
                acrossnum = int(across_u[0]) #converting the row number to int
                elem = str(ele) #converting element number to string
                #delem = str(dele)
                only_right = []
                all_downs = []
                wrong_downs = []
                if downydown == elem: #equate element of row to column number
                    #print('yey')
                    if dele == acrossnum: #equate element of column to row number
                        #print('wahey')
                        if arow[ele] == dcol[dele]: #if the elements in the row and column are the same
                            #print('yey')
                            all_downs.append(acrosslist[u])
                            aha_alist = []
                            if dcol[dele] =='0':
                                if dcol[dele-1] =='0':
                                    if dcol[dele-2] == '0':                                        
                                        continue
# =============================================================================
#                                 else:
#                                     #print(acrosslist[u])
#                                     uut = np.array(downlist[v])
#                                     aha_alist.append(uut)
#                                     print(uut)
# =============================================================================
                            elif arow[ele] == 'x':
                                continue
                            else:
                                #print(arow[ele])
                                #print(dcol[dele])
                                all_downs.append(ddown[v])
                                only_right.append(aacross[u])
                                #print(acrosslist[u])
                                eet = np.array(downlist[v])
                                aha_alist.append(eet)
                                print(eet) #print column
                            #aha_alist.append(downlist[v])       
                                #print(aha_alist)
                                #print(aha_alist)
                            #if aha_alist == 0:
                             #   acrosslist[u].remove()
                            #else:
                             #   all_downs.append(aha_alist)
                                #print(all_downs)
                                #aha_alist.clear()
    #print(aha_alist) 
#print(only_right)
#print(all_downs)                         

                                #print(all_downs)
                                #dahl = int(dcol[dele])
                       # '''If the number is between two xs or one x and the edge of
                        #the grid, change rest of number to xs.'''
                            #print(all_downs)
# =============================================================================
#                         if arow[ele] != dcol[dele]:
#                             wrong_downs.append(acrosslist[u])
#                             wrong_do
# =============================================================================
# =============================================================================
#                             if dcol[dele] == '0':
#                                 if dcol[dele-1] == '0':
#                                     if dcol[dele-2] == '0':
#                                         print(downlist[v])
#                                     elif dcol[dele-2] == 'x':
#                                         print(downlist[v])
# =============================================================================
# =============================================================================
#                             only_right.append(dcol[dele])
#                         else:
#                             only_right.append('0')
# =============================================================================                        
#%%
acrossrange = []
                            if new_string == six_string:
                                if array[i]==1:
                                    acrossrange.append(six_new_string)
                                if array[i]==1:
                                    acrossrange.append(six_new_string)
                            
                                                          
                            if new_string == six_string:
                                ar = np.arange(len(acrossrange))
                                                        
                                if array[i]== 1:
                                    if six_new_string in acrossrange:
                                        continue
                                    else:
                                        across.append(new_string)
                                        across.append(six_new_string)
                                        across_n.append(yoo)
                                        across_n.append(yoo)
                                        acr_num.append(xstr)
                                        acr_num.append(xstr)
                                    
                                elif array[i]== 11:
                                     if six_new_string in acrossrange:
                                         continue
                                     else:
                                         across.append(new_string)
                                         across.append(six_new_string)
                                         across_n.append(yoo)
                                         across_n.append(yoo)
                                         acr_num.append(xstr)
                                         acr_num.append(xstr)
                            else:
                                across_n.append(yoo)
                                across.append(new_string)
                                acr_num.append(xstr)
                            acrossrange = []
                            if new_string == six_string:
                                if array[i]==1:
                                    acrossrange.append(six_new_string)
                                if array[i]==1:
                                    acrossrange.append(six_new_string)
                            acrossrange.append(new_string)                                         
#%%
anewstack=(['3' '0000x54401963' '54401963'], ['7' '9454x00000000' '9454'],
['3' '0000x54401963' '54401963'],['7' '8684x00000000' '8684'],
['3' '0000x54401963' '54401963'],['7' '3434x00000000' '3434'],
['9' '54401963x0000' '54401963'], ['7' '0000x83823785' '83823785'],
['9' '54401963x0000' '54401963'] ,['1' '0000000x94740' '94740'],
['9' '54401963x0000' '54401963'], ['1' '0000000x84001' '84001'],
['9' '54401963x0000' '54401963'] ,['5' '00000000x9454' '9454'],
['3' '0000x32432142' '32432142'], ['5' '95538617x0000' '95538617'],
['3' '0000x32432142' '32432142'] ,['9' '83823785x0000' '83823785'],
['3' '0000x32432142' '32432142'], ['9' '73725126x0000' '73725126'],
['3' '0000x32432142' '32432142'] ,['9' '66320647x0000' '66320647'],
['3' '0000x32432142' '32432142'], ['11' '94740x0000000' '94740'],
['3' '0000x32432142' '32432142'] ,['7' '9454x00000000' '9454'],
['3' '0000x32432142' '32432142'], ['7' '8684x00000000' '8684'],
['3' '0000x32432142' '32432142'], ['7' '3434x00000000' '3434'],
['9' '32432142x0000' '32432142'], ['3' '0000x83823785' '83823785'],
['1' '846077x000000' '846077'], ['1' '7410650x00000' '7410650'],
['1' '000000x846077' '846077'], ['9' '66320647x0000' '66320647'],
['11' '846077x000000' '846077'], ['1' '0000000x94740' '94740'],
['11' '000000x846077' '846077'], ['7' '0000x83823785' '83823785'],
['5' '846077x0000xx' '846077'], ['5' '83823785x0000' '83823785'],
['7' 'xx0000x846077' '846077'], ['7' '0000x83823785' '83823785'],
['7' 'xx0000x846077' '846077'], ['9' '73725126x0000' '73725126'],
['7' 'xx0000x846077' '846077'] ,['11' '00000x8715405' '8715405'],
['1' '803401x000000' '803401'] ,['3' '9454x00000000' '9454'],
['1' '803401x000000' '803401'] ,['3' '3434x00000000' '3434'],
['1' '000000x803401' '803401'] ,['9' '83823785x0000' '83823785'],
['1' '000000x803401' '803401'] ,['9' '73725126x0000' '73725126'],
['11' '803401x000000' '803401'], ['3' '0000x66320647' '66320647'],
['11' '000000x803401' '803401'] ,['7' '0000x83823785' '83823785'],
['11' '000000x803401' '803401'] ,['9' '00000000x4133' '4133'],
['11' '000000x803401' '803401'] ,['9' '00000000x3434' '3434'],
['5' '803401x0000xx' '803401'] ,['5' '73725126x0000' '73725126'],
['7' 'xx0000x803401' '803401'] ,['7' '0000x83823785' '83823785'],
['1' '705445x000000' '705445'], ['5' '95538617x0000' '95538617'],
['1' '705445x000000' '705445'] ,['3' '9454x00000000' '9454'],
['1' '705445x000000' '705445'] ,['3' '3434x00000000' '3434'],
['1' '000000x705445' '705445'] ,['9' '95538617x0000' '95538617'],
['1' '000000x705445' '705445'] ,['11' '94740x0000000' '94740'],
['1' '000000x705445' '705445'] ,['11' '84001x0000000' '84001'],
['11' '705445x000000' '705445'], ['3' '0000x66320647' '66320647'],
['11' '705445x000000' '705445'] ,['5' '00000000x9454' '9454'],
['11' '000000x705445' '705445'] ,['9' '00000000x9454' '9454'],
['7' 'xx0000x705445' '705445'] ,['9' '83823785x0000' '83823785'],
['7' 'xx0000x705445' '705445'] ,['7' '0000x73725126' '73725126'],
['7' 'xx0000x705445' '705445'], ['11' '00000x7410650' '7410650'],
['1' '644125x000000' '644125'], ['5' '95538617x0000' '95538617'],
['1' '644125x000000' '644125'] ,['1' '7410650x00000' '7410650'],
['1' '644125x000000' '644125'], ['3' '4133x00000000' '4133'],
['1' '000000x644125' '644125'], ['7' '8684x00000000' '8684'],
['11' '644125x000000' '644125'], ['3' '0000x95538617' '95538617'],
['11' '644125x000000' '644125'], ['1' '0000000x94740' '94740'],
['11' '644125x000000' '644125'], ['5' '00000000x9454' '9454'],
['1' '623843x000000' '623843'] ,['5' '83823785x0000' '83823785'],
['1' '623843x000000' '623843'] ,['5' '73725126x0000' '73725126'],
['1' '000000x623843' '623843'], ['9' '83823785x0000' '83823785'],
['1' '000000x623843' '623843'] ,['9' '73725126x0000' '73725126'],
['1' '000000x623843' '623843'], ['11' '94740x0000000' '94740'],
['1' '000000x623843' '623843'] ,['11' '84001x0000000' '84001'],
['1' '000000x623843' '623843'] ,['7' '8684x00000000' '8684'],
['11' '623843x000000' '623843'], ['3' '0000x83823785' '83823785'],
['11' '623843x000000' '623843'], ['5' '00000000x4133' '4133'],
['11' '623843x000000' '623843'], ['5' '00000000x3434' '3434'],
['11' '000000x623843' '623843'], ['9' '00000000x4133' '4133'],
['11' '000000x623843' '623843'], ['9' '00000000x3434' '3434'],
['5' '623843x0000xx' '623843'] ,['3' '0000x83823785' '83823785'],
['7' 'xx0000x623843' '623843'], ['11' '00000x7410650' '7410650'],
['1' '253636x000000' '253636'], ['5' '66320647x0000' '66320647'],
['1' '253636x000000' '253636'], ['3' '8684x00000000' '8684'],
['1' '000000x253636' '253636'], ['9' '83823785x0000' '83823785'],
['1' '000000x253636' '253636'], ['9' '73725126x0000' '73725126'],
['11' '000000x253636' '253636'], ['7' '0000x73725126' '73725126'],
['11' '000000x253636' '253636'], ['9' '00000000x4133' '4133'],
['11' '000000x253636' '253636'], ['9' '00000000x3434' '3434'],
['5' '253636x0000xx' '253636'], ['5' '95538617x0000' '95538617'],
['5' '253636x0000xx' '253636'], ['3' '0000x66320647' '66320647'],
['5' '253636x0000xx' '253636'], ['5' '66320647x0000' '66320647'],
['5' '253636x0000xx' '253636'], ['1' '7410650x00000' '7410650'],
['5' '000000x8215xx' '8215'], ['7' '0000x83823785' '83823785'],
['5' '000000x8215xx' '8215'], ['9' '73725126x0000' '73725126'],
['7' 'xx8215x000000' '8215'], ['5' '83823785x0000' '83823785'],
['9' '00000000x8215' '8215'], ['9' '00000000x8684' '8684'],
['3' '5013x00000000' '5013'], ['3' '4133x00000000' '4133'],
['5' '000000x5013xx' '5013'], ['9' '73725126x0000' '73725126'],
['7' 'xx3057x000000' '3057'], ['5' '95538617x0000' '95538617'],
['7' 'xx3057x000000' '3057'], ['5' '66320647x0000' '66320647'],
['9' '00000000x3057' '3057'], ['11' '00000x8715405' '8715405'],
['9' '00000000x3057' '3057'], ['9' '00000000x3434' '3434'],
['7' 'xx1387x000000' '1387'], ['5' '95538617x0000' '95538617'],
['7' 'xx1387x000000' '1387'], ['3' '0000x66320647' '66320647'],
['7' 'xx1387x000000' '1387'], ['5' '66320647x0000' '66320647'],
['6' 'x0x0x183x0x0x' '183'], ['5' '95538617x0000' '95538617'],
['6' 'x0x0x183x0x0x' '183'], ['7' '0000x83823785' '83823785'],
['6' 'x0x0x183x0x0x' '183'], ['7' '0000x73725126' '73725126']
)
#%%
newlist = []
for i in range(len(across_n) - 1):
    value = across_n[i:i+2]
    newlist.append(value)
    print(newlist)
odd_numbers = [y for x,y in enumerate(newlist) if x%2 != 0]
even_numbers = [y for x,y in enumerate(newlist) if x%2 == 0]
print(even_numbers)
acrosslist = np.array(even_numbers)
print(acrosslist)
d_newlist = []
for i in range(len(down_n) - 1):
    value = down_n[i:i+2]
    d_newlist.append(value)
    print(d_newlist)
d_odd_numbers = [y for x,y in enumerate(d_newlist) if x%2 != 0]
d_even_numbers = [y for x,y in enumerate(d_newlist) if x%2 == 0]
print(d_even_numbers)
downlist = np.array(d_even_numbers)
print(downlist)
#%%
